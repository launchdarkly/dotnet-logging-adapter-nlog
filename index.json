{
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "Change log | Launchdarkly Logging Adapter For NLog",
    "keywords": "Change log All notable changes to the project will be documented in this file. For full release notes for the projects that depend on this project, see their respective changelogs. This file describes changes only to the common code. This project adheres to Semantic Versioning. [1.0.1] - 2021-05-20 Changed: Updated dependencies on LaunchDarkly.Logging to version 1.0.1. After the 1.0.1 release, the code was moved out of the previous monorepo into its own repository at https://github.com/launchdarkly/dotnet-logging-adapter-nlog. There were no code changes to the package, and the NuGet package name (LaunchDarkly.Logging.NLog) is unchanged. [1.0.0] - 2021-02-02 Initial release of this package."
  },
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contributing to the LaunchDarkly Logging API for .NET Adapters | Launchdarkly Logging Adapter For NLog",
    "keywords": "Contributing to the LaunchDarkly Logging API for .NET Adapters LaunchDarkly has published an SDK contributor's guide that provides a detailed explanation of how our SDKs work. See below for additional information on how to contribute to this SDK. Submitting bug reports and feature requests The LaunchDarkly SDK team monitors the issue tracker in this repository. Bug reports and feature requests specific to this package should be filed in this issue tracker. The SDK team will respond to all newly filed issues within two business days. Submitting pull requests We encourage pull requests and other contributions from the community. Before submitting pull requests, ensure that all temporary or unintended code is removed. Don't worry about adding reviewers to the pull request; the LaunchDarkly SDK team will add themselves. The SDK team will acknowledge all pull requests within two business days. Build instructions Prerequisites To set up your SDK build time environment, you must download .NET development tools and follow the instructions. .NET 5.0 is preferred, since the .NET 5.0 tools are able to build for all supported target platforms. Building To install all required packages: dotnet restore To build all targets of the project without running any tests: dotnet build Or, to build only the .NET Standard 2.0 target: dotnet build -f netstandard2.0 Testing To run all unit tests, for all targets: dotnet test Or, to run tests only for the .NET Standard 2.0 target (using the .NET Core 2.1 runtime): dotnet test -f netcoreapp2.1"
  },
  "README.html": {
    "href": "README.html",
    "title": "LaunchDarkly Logging API for .NET - NLog Adapter | Launchdarkly Logging Adapter For NLog",
    "keywords": "LaunchDarkly Logging API for .NET - NLog Adapter Overview This .NET package provides integration from the LaunchDarkly.Logging API that is used by the LaunchDarkly .NET SDK, Xamarin SDK, and other LaunchDarkly libraries, to NLog. For more information and examples, see the API documentation. Supported .NET versions The package is built for two target frameworks: .NET Standard 2.0: runs in .NET Core 2.1 and above, or in .NET 5.0 and above, or in library code that is targeted to .NET Standard 2.x. .NET Framework 4.5.2: runs in .NET Framework 4.5.2 and above. The .NET build tools should automatically load the most appropriate build of the library for whatever platform your application or library is targeted to. New versions of LaunchDarkly.Logging.NLog will be released as necessary to support higher versions of NLog if they become available. Contributing See Contributing. Signing The published version of this assembly is digitally signed with Authenticode and strong-named. Building the code locally in the default Debug configuration does not use strong-naming and does not require a key file. The public key file is in this repo at LaunchDarkly.Logging.pk as well as here: Public Key: 2400000080040000009400000206000024000000535231410400000000010001 afcbfe1e33dbb0c823ca71ef053aed35a49a7f1e601d9ee27fe86b78062b1d83 30814ed41ccaf3817ff3f699766e5debb3dd46fd75f7439fc2fe390fcee65465 a8a17f69f1bef56e253fc9166096c907514ab74b812d041faa04712e2bcb243d 1038eed2b0023a35a41782d70c65cb4b51d189576df0b7846e9378a5d0758a39 Public Key Token: d9182e4b0afd33e7 About LaunchDarkly LaunchDarkly is a continuous delivery platform that provides feature flags as a service and allows developers to iterate quickly and safely. We allow you to easily flag your features and manage them from the LaunchDarkly dashboard. With LaunchDarkly, you can: Roll out a new feature to a subset of your users (like a group of users who opt-in to a beta tester group), gathering feedback and bug reports from real-world use cases. Gradually roll out a feature to an increasing percentage of users, and track the effect that the feature has on key metrics (for instance, how likely is a user to complete a purchase if they have feature A versus feature B?). Turn off a feature that you realize is causing performance problems in production, without needing to re-deploy, or even restart the application with a changed configuration file. Grant access to certain features based on user attributes, like payment plan (eg: users on the ‘gold’ plan get access to more features than users in the ‘silver’ plan). Disable parts of your application to facilitate maintenance, without taking everything offline. LaunchDarkly provides feature flag SDKs for a wide variety of languages and technologies. Check out our documentation for a complete list. Explore LaunchDarkly launchdarkly.com for more information docs.launchdarkly.com for our documentation and SDK reference guides apidocs.launchdarkly.com for our API documentation blog.launchdarkly.com for the latest product updates"
  },
  "SECURITY.html": {
    "href": "SECURITY.html",
    "title": "Reporting and Fixing Security Issues | Launchdarkly Logging Adapter For NLog",
    "keywords": "Reporting and Fixing Security Issues Please report all security issues to the LaunchDarkly security team by submitting a bug bounty report to our HackerOne program. LaunchDarkly will triage and address all valid security issues following the response targets defined in our program policy. Valid security issues may be eligible for a bounty. Please do not open issues or pull requests for security issues. This makes the problem immediately visible to everyone, including potentially malicious actors."
  },
  "api/LaunchDarkly.Logging.LdNLog.html": {
    "href": "api/LaunchDarkly.Logging.LdNLog.html",
    "title": "Class LdNLog | Launchdarkly Logging Adapter For NLog",
    "keywords": "Class LdNLog Namespace LaunchDarkly.Logging Assembly LaunchDarkly.Logging.NLog.dll Provides integration between the LaunchDarkly SDK's logging framework and the NLog framework. public static class LdNLog Inheritance object LdNLog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Adapter Returns an adapter for directing LaunchDarkly.Logging output to NLog. public static ILogAdapter Adapter { get; } Property Value ILogAdapter an ILogAdapter that delegates to NLog Examples using LaunchDarkly.Logging; using LaunchDarkly.Sdk.Server; var config = Configuration.Builder(\"my-sdk-key\") .Logging(LdNLog.Adapter) .Build(); var client = new LdClient(config); Remarks Using this adapter will cause LaunchDarkly.Logging to delegate each logger it creates to a corresponding logger created with NLog.LogManager.GetLogger. What happens to the log output then is entirely determined by the NLog configuration; there are no configuration methods on the Adapter itself. The logger names that are used within the LaunchDarkly.Logging framework are passed along as logger names to NLog, so they can be used in filtering rules, etc. The example code below shows how to configure the LaunchDarkly SDK to use NLog."
  },
  "api/LaunchDarkly.Logging.html": {
    "href": "api/LaunchDarkly.Logging.html",
    "title": "Namespace LaunchDarkly.Logging | Launchdarkly Logging Adapter For NLog",
    "keywords": "Namespace LaunchDarkly.Logging Classes LdNLog Provides integration between the LaunchDarkly SDK's logging framework and the NLog framework."
  },
  "index.html": {
    "href": "index.html",
    "title": "| Launchdarkly Logging Adapter For NLog",
    "keywords": "This .NET package provides integration from the LaunchDarkly.Logging API that is used by the LaunchDarkly .NET SDK, Xamarin SDK, and other LaunchDarkly libraries, to NLog. This adapter is published as a separate NuGet package to avoid unwanted dependencies on NLog in the LaunchDarkly SDKs and in applications that do not use that framework. Usage The LdNLog adapter is provided by the NuGet package LaunchDarkly.Logging.NLog. It provides integration with NLog version 4.5.0 and higher. Earlier versions of NLog are not supported because they only had a .NET Standard 1.6 target framework, and LaunchDarkly libraries do not support .NET Standard 1.6. NLog has a rich configuration system that allows log behavior to be controlled in many ways. The LaunchDarkly adapter does not define any specific logging behavior itself, so the actual behavior will be determined by how you have configured NLog. To use the adapter: Add the NuGet package LaunchDarkly.Logging.NLog to your project. Make sure you also have a dependency on a compatible version of NLog. Use the property LdNLog.Adapter in any LaunchDarkly library configuration that accepts a LaunchDarkly.Logging.ILogAdapter object. For instance, if you are configuring the LaunchDarkly .NET SDK: using LaunchDarkly.Logging; using LaunchDarkly.Sdk.Server; var config = Configuration.Builder(\"my-sdk-key\") .Logging(LdNLog.Adapter) .Build(); var client = new LdClient(config);"
  }
}